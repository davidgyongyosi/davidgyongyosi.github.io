@use 'variables' as *;

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media screen and (max-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media screen and (min-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media screen and (min-width: $breakpoint-lg) {
      @content;
    }
  }
}

// Corner border pattern (used in multiple places)
@mixin corner-border($size: 17px, $color: $primary-color) {
  background:
    linear-gradient(to right, $color 1px, transparent 1px) 0 0,
    linear-gradient(to right, $color 1px, transparent 1px) 0 100%,
    linear-gradient(to left, $color 1px, transparent 1px) 100% 0,
    linear-gradient(to left, $color 1px, transparent 1px) 100% 100%,
    linear-gradient(to bottom, $color 1px, transparent 1px) 0 0,
    linear-gradient(to bottom, $color 1px, transparent 1px) 100% 0,
    linear-gradient(to top, $color 1px, transparent 1px) 0 100%,
    linear-gradient(to top, $color 1px, transparent 1px) 100% 100%;
  background-repeat: no-repeat;
  background-size: $size $size;
}

// Button styles
@mixin button-primary {
  background-color: transparent;
  border: 1px solid $primary-color;
  color: $primary-color;
  transition: all $transition-fast;
  padding: 0.3rem 1rem;
  width: fit-content;
  @include text-button;

  &:hover {
    background-color: $primary-color;
    color: black;
  }
}

// Card styles
@mixin card {
  background-color: transparent;
  border: 2px solid $border-gray;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

// Typography mixins for consistent text styling

// Responsive typography that scales across breakpoints
@mixin fluid-type($min-size, $max-size) {
  font-size: $min-size;

  @media (min-width: $breakpoint-md) {
    font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$breakpoint-md}) / #{strip-unit($breakpoint-xl - $breakpoint-md)}));
  }

  @media (min-width: $breakpoint-xl) {
    font-size: $max-size;
  }
}

// Helper function to strip units from numbers for calculations
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Typography preset mixins
@mixin text-display {
  font-size: $font-size-6xl;
  font-weight: $font-weight-bold;
  line-height: $line-height-tight;
  letter-spacing: $letter-spacing-tight;

  @include respond-to(sm) {
    font-size: $font-size-4xl;
  }

  @include respond-to(md) {
    font-size: $font-size-5xl;
  }
}

@mixin text-h1 {
  font-size: $font-size-4xl;
  font-weight: $font-weight-bold;
  line-height: $line-height-tight;
  letter-spacing: $letter-spacing-tight;

  @include respond-to(sm) {
    font-size: $font-size-3xl;
  }

  @include respond-to(md) {
    font-size: $font-size-4xl;
  }
}

@mixin text-h2 {
  font-size: $font-size-3xl;
  font-weight: $font-weight-semibold;
  line-height: $line-height-tight;
  color: $primary-color;

  @include respond-to(sm) {
    font-size: $font-size-2xl;
  }
}

@mixin text-h3 {
  font-size: $font-size-2xl;
  font-weight: $font-weight-medium;
  line-height: $line-height-normal;
  color: $primary-color;

  @include respond-to(sm) {
    font-size: $font-size-xl;
  }
}

@mixin text-h4 {
  font-size: $font-size-xl;
  font-weight: $font-weight-medium;
  line-height: $line-height-normal;
}

@mixin text-body {
  font-size: $font-size-base;
  font-weight: $font-weight-normal;
  line-height: $line-height-relaxed;
}

@mixin text-body-large {
  font-size: $font-size-lg;
  font-weight: $font-weight-normal;
  line-height: $line-height-normal;
}

@mixin text-small {
  font-size: $font-size-sm;
  font-weight: $font-weight-normal;
  line-height: $line-height-normal;
}

@mixin text-caption {
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: $line-height-normal;
  letter-spacing: $letter-spacing-wide;
}

@mixin text-button {
  font-size: $font-size-sm;
  font-weight: $font-weight-medium;
  line-height: $line-height-tight;
  letter-spacing: $letter-spacing-wide;
}
