---
import type { SkillCategory } from "../data/skills";

export interface Props {
  skills: SkillCategory[];
}

const { skills } = Astro.props;

// Get category colors
const getCategoryColor = (category: string): string => {
  const colors: Record<string, string> = {
    'Languages': '#56b6c2',
    'Frameworks & Libraries': '#fbbf24',
    'Database & Data': '#4ade80',
    'DevOps & Infrastructure': '#e06c75',
    'Tools & Styling': '#a78bfa'
  };
  return colors[category] || '#56b6c2';
};

// Get skill icon URLs
const getSkillIcon = (skillName: string): string => {
  const icons: Record<string, string> = {
    'TypeScript': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/typescript/typescript-original.svg',
    'JavaScript': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg',
    'C#': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg',
    'Go': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/go/go-original.svg',
    'Rust': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/rust/rust-original.svg',
    'SQL': 'https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@v11/icons/postgresql.svg',
    'HTML': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/html5/html5-original.svg',
    'React': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg',
    'Vue': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vuejs/vuejs-original.svg',
    'Angular': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/angularjs/angularjs-original.svg',
    'Astro': 'https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@v11/icons/astro.svg',
    'Next.js': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nextjs/nextjs-original.svg',
    'Svelte': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/svelte/svelte-original.svg',
    'Electron': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/electron/electron-original.svg',
    'Tauri': 'https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@v11/icons/tauri.svg',
    '.NET': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/dot-net/dot-net-original.svg',
    'MSSQL': 'https://cdn.jsdelivr.net/gh/simple-icons/simple-icons@v11/icons/microsoftsqlserver.svg',
    'MySQL': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mysql/mysql-original.svg',
    'SQLite': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/sqlite/sqlite-original.svg',
    'PostgreSQL': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg',
    'Docker': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/docker/docker-original.svg',
    'Kubernetes': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/kubernetes/kubernetes-original.svg',
    'Node.js': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/nodejs/nodejs-original.svg',
    'Git': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/git/git-original.svg',
    'GitHub': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/github/github-original.svg',
    'Figma': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/figma/figma-original.svg',
    'VS Code': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vscode/vscode-original.svg',
    'Neovim': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/vim/vim-original.svg',
    'CSS': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/css3/css3-original.svg',
    'SCSS': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/sass/sass-original.svg',
    'Tailwind': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/tailwindcss/tailwindcss-original.svg'
  };
  return icons[skillName] || 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/code/code-original.svg';
};

// Get skill descriptions
const getSkillDescription = (skillName: string): string => {
  const descriptions: Record<string, string> = {
    'TypeScript': 'TYPE_SYSTEM.exe',
    'JavaScript': 'RUNTIME.vm',
    'C#': 'COMPILED.dll',
    'Go': 'CONCURRENCY.go',
    'Rust': 'MEMORY_SAFE.rs',
    'SQL': 'QUERY.sql',
    'HTML': 'MARKUP.html',
    'React': 'COMPONENT.jsx',
    'Vue': 'REACTIVE.vue',
    'Angular': 'FRAMEWORK.ts',
    'Astro': 'STATIC.astro',
    'Next.js': 'SSR.react',
    'Svelte': 'COMPILED.svelte',
    'Electron': 'DESKTOP.app',
    'Tauri': 'RUST_DESKTOP.exe',
    '.NET': 'FRAMEWORK.dll',
    'MSSQL': 'ENTERPRISE.mdf',
    'MySQL': 'OPENSOURCE.db',
    'SQLite': 'EMBEDDED.db',
    'PostgreSQL': 'POSTGRES.sql',
    'Docker': 'CONTAINER.docker',
    'Kubernetes': 'ORCHESTRATOR.k8s',
    'Node.js': 'RUNTIME.node',
    'Git': 'VERSION.git',
    'GitHub': 'REMOTE.git',
    'Figma': 'DESIGN.fig',
    'VS Code': 'EDITOR.code',
    'Neovim': 'TERMINAL.vim',
    'CSS': 'STYLES.css',
    'SCSS': 'PREPROCESSOR.scss',
    'Tailwind': 'UTILITY.css'
  };
  return descriptions[skillName] || `${skillName.toUpperCase()}.bin`;
};

const getTotalSkills = skills.reduce((total, category) => total + category.skills.length, 0);

// Flatten all skills with their categories
const allSkills = skills.flatMap(category =>
  category.skills.map(skill => ({
    name: skill.name,
    category: category.category,
    color: getCategoryColor(category.category),
    icon: getSkillIcon(skill.name),
    description: getSkillDescription(skill.name)
  }))
);

// Serialize data for client-side JavaScript
const skillsDataJson = JSON.stringify({
  categories: skills.map(cat => ({
    category: cat.category,
    color: getCategoryColor(cat.category),
    skillCount: cat.skills.length
  })),
  allSkills: allSkills
});
---

<div class="ide-terminal" id="skills">
  <!-- Top Bar (macOS style) -->
  <div class="ide-header">
    <div class="window-controls">
      <div class="window-btn close"></div>
      <div class="window-btn minimize"></div>
      <div class="window-btn maximize"></div>
    </div>
    <div class="ide-title">skills-terminal ‚Äî ~/portfolio/skills</div>
    <div class="ide-actions">
      <span class="action-icon">‚öôÔ∏è</span>
    </div>
  </div>

  <!-- Main IDE Layout -->
  <div class="ide-body">
    <!-- Left Sidebar - File Explorer -->
    <div class="ide-sidebar">
      <div class="sidebar-header">
        <span class="sidebar-title">EXPLORER</span>
      </div>
      <div class="file-tree">
        <div class="folder-item">
          <span class="folder-icon">üìÅ</span>
          <span class="folder-name">skills</span>
        </div>
        {skills.map((category, idx) => (
          <div
            class="file-item category-file"
            data-category={category.category}
            style={`--category-color: ${getCategoryColor(category.category)};`}
          >
            <span class="file-icon">üìÑ</span>
            <span class="file-name">{category.category.toLowerCase().replace(/\s+/g, '_')}.ts</span>
            <span class="file-badge">{category.skills.length}</span>
          </div>
        ))}
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="ide-main">
      <!-- Content Display Area -->
      <div class="content-display" id="contentDisplay">
        <div class="welcome-message">
          <h3>Welcome to Skills Terminal</h3>
          <p>Type <code>help</code> to see available commands</p>
          <p>Type <code>all</code> to display all skills</p>
        </div>
      </div>

      <!-- Terminal Panel -->
      <div class="terminal-panel">
        <div class="terminal-header">
          <div class="terminal-tabs">
            <div class="terminal-tab active">
              <span>bash</span>
              <span class="tab-close">√ó</span>
            </div>
          </div>
          <div class="terminal-controls">
            <span title="Split Terminal">‚äû</span>
            <span title="Clear">üóëÔ∏è</span>
          </div>
        </div>
        <div class="terminal-content" id="terminalOutput">
          <div class="terminal-line">
            <span class="prompt">david@majin:~/skills$</span>
            <span class="command-hint">Type 'help' for commands...</span>
          </div>
        </div>
        <div class="terminal-input-line">
          <span class="prompt">david@majin:~/skills$</span>
          <input
            type="text"
            class="terminal-input"
            id="terminalInput"
            placeholder="Enter command..."
            autocomplete="off"
            spellcheck="false"
          />
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Pass skills data to JavaScript -->
<script define:vars={{ skillsDataJson }}>
  const skillsData = JSON.parse(skillsDataJson);
  let commandHistory = [];
  let historyIndex = -1;
  let currentFilter = null;

  const contentDisplay = document.getElementById('contentDisplay');
  const terminalOutput = document.getElementById('terminalOutput');
  const terminalInput = document.getElementById('terminalInput');

  // Command processor
  const commands = {
    help: () => {
      return `
        <div class="help-output">
          <div class="help-section">
            <strong>Available Commands:</strong>
            <ul>
              <li><code>help</code> - Show this help message</li>
              <li><code>all</code> or <code>list</code> - Display all skills</li>
              <li><code>show &lt;category&gt;</code> - Show skills from a category</li>
              <li><code>categories</code> or <code>ls</code> - List all categories</li>
              <li><code>clear</code> - Clear the terminal output</li>
              <li><code>stats</code> - Show skill statistics</li>
            </ul>
          </div>
          <div class="help-section">
            <strong>Examples:</strong>
            <ul>
              <li><code>show languages</code></li>
              <li><code>show frameworks</code></li>
              <li><code>show database</code></li>
            </ul>
          </div>
        </div>
      `;
    },

    all: () => {
      currentFilter = null;
      displaySkills(skillsData.allSkills);
      return `<span class="success">‚úì Displaying all ${skillsData.allSkills.length} skills</span>`;
    },

    list: () => commands.all(),

    categories: () => {
      const categoryList = skillsData.categories.map(cat =>
        `<div class="category-list-item" style="color: ${cat.color};">
          <span class="category-bullet">‚óè</span>
          <span class="category-list-name">${cat.category}</span>
          <span class="category-list-count">(${cat.skillCount} skills)</span>
        </div>`
      ).join('');
      return `<div class="categories-output">${categoryList}</div>`;
    },

    ls: () => commands.categories(),

    show: (args) => {
      if (!args || args.length === 0) {
        return `<span class="error">‚úó Error: Please specify a category. Use 'categories' to see all.</span>`;
      }

      const query = args.join(' ').toLowerCase();
      const matchedCategory = skillsData.categories.find(cat =>
        cat.category.toLowerCase().includes(query)
      );

      if (!matchedCategory) {
        return `<span class="error">‚úó Error: Category '${query}' not found. Use 'categories' to see all.</span>`;
      }

      const filteredSkills = skillsData.allSkills.filter(skill =>
        skill.category === matchedCategory.category
      );

      currentFilter = matchedCategory.category;
      displaySkills(filteredSkills);
      return `<span class="success">‚úì Displaying ${filteredSkills.length} skills from ${matchedCategory.category}</span>`;
    },

    clear: () => {
      terminalOutput.innerHTML = '';
      return '';
    },

    stats: () => {
      const totalSkills = skillsData.allSkills.length;
      const categoryCount = skillsData.categories.length;
      const avgPerCategory = Math.round(totalSkills / categoryCount);

      return `
        <div class="stats-output">
          <div class="stat-row">
            <span class="stat-label">Total Skills:</span>
            <span class="stat-value">${totalSkills}</span>
          </div>
          <div class="stat-row">
            <span class="stat-label">Categories:</span>
            <span class="stat-value">${categoryCount}</span>
          </div>
          <div class="stat-row">
            <span class="stat-label">Average per Category:</span>
            <span class="stat-value">${avgPerCategory}</span>
          </div>
        </div>
      `;
    }
  };

  // Display skills in content area
  function displaySkills(skills) {
    // Sort skills alphabetically by name
    const sortedSkills = [...skills].sort((a, b) => a.name.localeCompare(b.name));

    const skillsHtml = sortedSkills.map((skill, index) => `
      <div class="skill-tile" style="--tile-color: ${skill.color}; --tile-icon: url('${skill.icon}'); --delay: ${index * 0.03}s; --index: ${index};">
        <div class="tile-content">
          <div class="tile-body">
            <div class="tile-name">${skill.name}</div>
            <div class="tile-category">${skill.category}</div>
            <div class="tile-description">${skill.description}</div>
          </div>
          <div class="tile-glitch"></div>
        </div>
      </div>
    `).join('');

    contentDisplay.innerHTML = `<div class="skills-grid">${skillsHtml}</div>`;
  }

  // Process command
  function processCommand(input) {
    const trimmed = input.trim();
    if (!trimmed) return;

    commandHistory.push(trimmed);
    historyIndex = commandHistory.length;

    const parts = trimmed.split(' ');
    const cmd = parts[0].toLowerCase();
    const args = parts.slice(1);

    // Add command to output
    const commandLine = document.createElement('div');
    commandLine.className = 'terminal-line';
    commandLine.innerHTML = `<span class="prompt">david@majin:~/skills$</span> <span class="user-command">${trimmed}</span>`;
    terminalOutput.appendChild(commandLine);

    // Execute command
    let output = '';
    if (commands[cmd]) {
      output = commands[cmd](args);
    } else {
      output = `<span class="error">‚úó Command not found: ${cmd}. Type 'help' for available commands.</span>`;
    }

    if (output) {
      const outputLine = document.createElement('div');
      outputLine.className = 'terminal-line output';
      outputLine.innerHTML = output;
      terminalOutput.appendChild(outputLine);
    }

    // Scroll to bottom
    terminalOutput.scrollTop = terminalOutput.scrollHeight;
    terminalInput.value = '';
  }

  // Event listeners
  terminalInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      processCommand(terminalInput.value);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex > 0) {
        historyIndex--;
        terminalInput.value = commandHistory[historyIndex];
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        terminalInput.value = commandHistory[historyIndex];
      } else {
        historyIndex = commandHistory.length;
        terminalInput.value = '';
      }
    }
  });

  // Sidebar folder click - show all skills
  document.querySelector('.folder-item').addEventListener('click', () => {
    terminalInput.value = 'all';
    processCommand(terminalInput.value);
  });

  // Sidebar category click
  document.querySelectorAll('.category-file').forEach(file => {
    file.addEventListener('click', () => {
      const category = file.dataset.category;
      terminalInput.value = `show ${category.toLowerCase()}`;
      processCommand(terminalInput.value);
    });
  });

  // Focus input when clicking terminal
  document.querySelector('.terminal-panel').addEventListener('click', () => {
    terminalInput.focus();
  });

  // Auto-focus on load
  setTimeout(() => terminalInput.focus(), 100);
</script>

<style is:global>
  .ide-terminal {
    height: 700px;
    background: #131613;
    border: 1px solid rgba(86, 182, 194, 0.2);
    border-radius: 8px;
    overflow: hidden;
    font-family: 'Geist Mono', monospace;
    display: flex;
    flex-direction: column;
  }

  /* IDE Header */
  .ide-header {
    background: #282c34;
    border-bottom: 1px solid rgba(86, 182, 194, 0.1);
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .window-controls {
    display: flex;
    gap: 0.5rem;
  }

  .window-btn {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .window-btn.close { background: #e06c75; }
  .window-btn.minimize { background: #fbbf24; }
  .window-btn.maximize { background: #4ade80; }

  .ide-title {
    color: #cccccc;
    font-size: 0.875rem;
    flex: 1;
    text-align: center;
  }

  .ide-actions {
    font-size: 1rem;
  }

  .action-icon {
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s;
  }

  .action-icon:hover {
    opacity: 1;
  }

  /* IDE Body */
  .ide-body {
    display: flex;
    flex: 1;
    overflow: hidden;
  }

  /* Left Sidebar */
  .ide-sidebar {
    width: 250px;
    background: rgba(19, 22, 19, 0.9);
    border-right: 1px solid rgba(86, 182, 194, 0.1);
    display: flex;
    flex-direction: column;
  }

  .sidebar-header {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgba(86, 182, 194, 0.1);
  }

  .sidebar-title {
    color: #cccccc;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .file-tree {
    padding: 0.5rem;
    overflow-y: auto;
  }

  .folder-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    color: #cccccc;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
    cursor: pointer;
    transition: background 0.2s;
    border-radius: 4px;
  }

  .folder-item:hover {
    background: rgba(86, 182, 194, 0.1);
  }

  .folder-icon {
    font-size: 1rem;
  }

  .file-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.5rem 0.5rem 1.5rem;
    color: #cccccc;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background 0.2s;
    border-radius: 4px;
    margin-bottom: 0.125rem;
  }

  .file-item:hover {
    background: rgba(86, 182, 194, 0.1);
  }

  .file-icon {
    font-size: 0.875rem;
  }

  .file-name {
    flex: 1;
    color: var(--category-color, #cccccc);
  }

  .file-badge {
    background: rgba(86, 182, 194, 0.2);
    color: #56b6c2;
    padding: 0.125rem 0.375rem;
    border-radius: 10px;
    font-size: 0.625rem;
    font-weight: 600;
  }

  /* Main Content Area */
  .ide-main {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .content-display {
    flex: 1;
    background: #131613;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 1.5rem;
    max-height: 400px;
  }

  .content-display::-webkit-scrollbar {
    width: 8px;
  }

  .content-display::-webkit-scrollbar-track {
    background: rgba(19, 22, 19, 0.5);
  }

  .content-display::-webkit-scrollbar-thumb {
    background: rgba(86, 182, 194, 0.3);
    border-radius: 4px;
  }

  .content-display::-webkit-scrollbar-thumb:hover {
    background: rgba(86, 182, 194, 0.5);
  }

  .welcome-message {
    color: #cccccc;
  }

  .welcome-message h3 {
    color: #56b6c2;
    margin-bottom: 1rem;
  }

  .welcome-message p {
    margin-bottom: 0.5rem;
  }

  .welcome-message code {
    background: rgba(86, 182, 194, 0.2);
    color: #56b6c2;
    padding: 0.125rem 0.375rem;
    border-radius: 3px;
    font-family: 'Geist Mono', monospace;
  }

  /* Skills Grid - Matches SkillMatrix Component */
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    gap: 0.75rem;
    padding: 0;
  }

  .skill-tile {
    opacity: 0;
    animation: tileAppear 0.6s ease-out forwards;
    animation-delay: var(--delay);
  }

  @keyframes tileAppear {
    0% {
      opacity: 0;
      transform: translateY(15px) scale(0.9);
    }
    50% {
      transform: translateY(-3px) scale(1.02);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .tile-content {
    background: rgba(40, 44, 52, 0.9);
    border: 1px solid rgba(86, 182, 194, 0.2);
    border-radius: 6px;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    cursor: pointer;
    height: 100%;
    min-height: 120px;
  }

  .tile-content:hover {
    border-color: var(--tile-color);
    background: rgba(40, 44, 52, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 4px 20px var(--tile-color);
  }

  .tile-content:hover::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 80px;
    background-image: var(--tile-icon);
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    opacity: 0.25;
    pointer-events: none;
    z-index: 0;
    filter: drop-shadow(0 0 10px var(--tile-color));
  }

  .tile-body {
    padding: 1rem 0.75rem;
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    height: 100%;
  }

  .tile-name {
    color: var(--tile-color);
    font-size: 0.9rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.2;
  }

  .tile-category {
    color: #9ca3af;
    font-size: 0.625rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    background: rgba(19, 22, 19, 0.6);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    border: 1px solid rgba(86, 182, 194, 0.1);
    width: fit-content;
  }

  .tile-description {
    color: #abb2bf;
    font-size: 0.7rem;
    font-family: 'Geist Mono', monospace;
    line-height: 1.3;
  }

  .tile-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--tile-color);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.1s ease;
  }

  .tile-content:hover .tile-glitch {
    animation: glitch 0.3s ease-out;
  }

  @keyframes glitch {
    0%, 100% { opacity: 0; }
    20% { opacity: 0.1; transform: translateX(-2px); }
    40% { opacity: 0.05; transform: translateX(2px); }
    60% { opacity: 0.1; transform: translateX(-1px); }
    80% { opacity: 0.05; transform: translateX(1px); }
  }

  /* Terminal Panel */
  .terminal-panel {
    height: 250px;
    background: #131613;
    border-top: 1px solid rgba(86, 182, 194, 0.1);
    display: flex;
    flex-direction: column;
  }

  .terminal-header {
    background: #282c34;
    border-bottom: 1px solid rgba(86, 182, 194, 0.1);
    padding: 0.5rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .terminal-tabs {
    display: flex;
    gap: 0.5rem;
  }

  .terminal-tab {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem 0.75rem;
    background: #131613;
    border: 1px solid rgba(86, 182, 194, 0.1);
    border-radius: 4px 4px 0 0;
    color: #cccccc;
    font-size: 0.75rem;
  }

  .terminal-tab.active {
    border-bottom-color: #131613;
  }

  .tab-close {
    opacity: 0.6;
    cursor: pointer;
  }

  .tab-close:hover {
    opacity: 1;
  }

  .terminal-controls {
    display: flex;
    gap: 0.75rem;
    font-size: 0.875rem;
    opacity: 0.7;
  }

  .terminal-controls span {
    cursor: pointer;
    transition: opacity 0.2s;
  }

  .terminal-controls span:hover {
    opacity: 1;
  }

  .terminal-content {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    font-size: 0.875rem;
  }

  .terminal-line {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    color: #cccccc;
  }

  .terminal-line.output {
    padding-left: 0;
    display: block;
    margin-bottom: 1rem;
  }

  .prompt {
    color: #4ade80;
    font-weight: 600;
  }

  .command-hint {
    color: #6b7280;
    font-style: italic;
  }

  .user-command {
    color: #56b6c2;
  }

  .terminal-input-line {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0 1rem 1rem;
    background: #1e1e1e;
  }

  .terminal-input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: #56b6c2;
    font-family: 'Geist Mono', monospace;
    font-size: 0.875rem;
  }

  .terminal-input::placeholder {
    color: #6b7280;
  }

  /* Command output styling */
  .success {
    color: #4ade80;
  }

  .error {
    color: #e06c75;
  }

  .help-output {
    color: #cccccc;
  }

  .help-section {
    margin-bottom: 1rem;
  }

  .help-section strong {
    color: #56b6c2;
    display: block;
    margin-bottom: 0.5rem;
  }

  .help-section ul {
    list-style: none;
    padding-left: 1rem;
  }

  .help-section li {
    margin-bottom: 0.25rem;
  }

  .help-section code {
    color: #fbbf24;
    background: rgba(251, 191, 36, 0.1);
    padding: 0.125rem 0.375rem;
    border-radius: 3px;
  }

  .categories-output {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .category-list-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .category-bullet {
    font-size: 0.75rem;
  }

  .category-list-name {
    font-weight: 600;
  }

  .category-list-count {
    color: #9ca3af;
    font-size: 0.875rem;
  }

  .stats-output {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    color: #cccccc;
  }

  .stat-row {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem;
    background: rgba(86, 182, 194, 0.1);
    border-radius: 4px;
  }

  .stat-label {
    color: #9ca3af;
  }

  .stat-value {
    color: #56b6c2;
    font-weight: 700;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .ide-sidebar {
      width: 200px;
    }

    .skills-grid {
      grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
      gap: 0.5rem;
    }

    .tile-name {
      font-size: 0.8rem;
    }

    .tile-description {
      font-size: 0.625rem;
    }

    .terminal-panel {
      height: 200px;
    }
  }

  @media (max-width: 640px) {
    .ide-body {
      flex-direction: column;
    }

    .ide-sidebar {
      width: 100%;
      max-height: 200px;
      border-right: none;
      border-bottom: 1px solid rgba(86, 182, 194, 0.1);
    }

    .file-tree {
      display: flex;
      gap: 0.5rem;
      overflow-x: auto;
    }

    .folder-item {
      flex-shrink: 0;
    }

    .file-item {
      flex-shrink: 0;
      min-width: 150px;
    }

    .skills-grid {
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }

    .terminal-panel {
      height: 250px;
    }
  }
</style>
